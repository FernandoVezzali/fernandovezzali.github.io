"use strict";(self.webpackChunkvezzali=self.webpackChunkvezzali||[]).push([[1136],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(n),u=a,y=g["".concat(s,".").concat(u)]||g[u]||d[u]||i;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(8168),a=(n(6540),n(5680));const i={sidebar_position:1},o="The Strategy Pattern",l={unversionedId:"behavioral-design-patterns/strategy-patterns",id:"behavioral-design-patterns/strategy-patterns",title:"The Strategy Pattern",description:"Simple exercise where we are going to apply The Strategy Pattern in a small C# application.",source:"@site/docs/behavioral-design-patterns/strategy-patterns.md",sourceDirName:"behavioral-design-patterns",slug:"/behavioral-design-patterns/strategy-patterns",permalink:"/docs/behavioral-design-patterns/strategy-patterns",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/behavioral-design-patterns/strategy-patterns.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Design Patterns",permalink:"/docs/design-patterns"},next:{title:"Create a Page",permalink:"/docs/tutorial-basics/create-a-page"}},s={},p=[{value:"Single Responsibility Principle",id:"single-responsibility-principle",level:2},{value:"Creating an abstraction",id:"creating-an-abstraction",level:2},{value:"Creating the strategies",id:"creating-the-strategies",level:2},{value:"Last step",id:"last-step",level:2}],c={toc:p},g="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(g,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"the-strategy-pattern"},"The Strategy Pattern"),(0,a.yg)("p",null,"Simple exercise where we are going to apply The Strategy Pattern in a small C# application. "),(0,a.yg)("p",null,"Folder Structure:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"  \n  \u2514\u2500\u2500 Before\n      \u251c\u2500\u2500 App.Tests\n      \u251c\u2500\u2500 App.Web\n      \u2514\u2500\u2500 App.Domain\n          \u2514\u2500\u2500 ShippingCalculator.cs \n      \n  \u2514\u2500\u2500 After\n      \u251c\u2500\u2500 App.Tests\n      \u251c\u2500\u2500 App.Web\n      \u2514\u2500\u2500 App.Domain\n          \u251c\u2500\u2500 ShippingCalculator.cs       \n          \u2514\u2500\u2500 Strategy\n              \u251c\u2500\u2500 IShippingCostStrategy.cs\n              \u251c\u2500\u2500 FedExStrategy.cs\n              \u251c\u2500\u2500 UPSStrategy.cs\n              \u2514\u2500\u2500 USPSStrategy.cs\n              \n")),(0,a.yg)("p",null,"Our case study will be the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/FernandoVezzali/pattern-strategy/blob/master/Before/App.Domain/ShippingCalculator.cs"},"ShippingCalculator")," class, we will redesign this class and apply the strategy pattern, let's start by opening the class:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"public class ShippingCalculator\n{\n    public double CalculateCost(Order order)\n    {\n        switch (order.ShippingMethod)\n        {\n            case ShippingOptions.FedEx:\n                return CalculateForFedEx(order);\n\n            case ShippingOptions.UPS:\n                return CalculateForUPS(order);\n\n            case ShippingOptions.USPS:\n                return CalculateForUSPS(order);\n\n            default:\n                throw new UnknownOrderShippingMethodException();\n\n        }\n    }\n\n    double CalculateForUSPS(Order order)\n    {\n        return order.Product == ProductType.Book ? 3.00d * 0.9 : 3.00d;\n    }\n\n    double CalculateForUPS(Order order)\n    {\n        return order.Weight > 400 ? 4.25d * 1.1 : 4.25d;\n    }\n\n    double CalculateForFedEx(Order order)\n    {\n        return order.Weight > 300 ? 5.00d * 1.1 : 5.00d;\n    }\n}\n")),(0,a.yg)("p",null,"Mind the code above, at first glance it looks good, the unit tests are passing and it does what it supposed to do: Calculate shipping costs. From a design perspective, there's room for improvement."),(0,a.yg)("h2",{id:"single-responsibility-principle"},"Single Responsibility Principle"),(0,a.yg)("p",null,"A class should have only a single responsibility, the ShippingCalculator class has more than one, it should calculate shipping costs without knowing the different carriers, as if in the future we need to add a new carrier, that would require us to change this class and that would violate the Single Responsibility Principle (SRP)."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"In the context of the Single Responsibility Principle (SRP) we define a responsibility to be \u201ca reason for change.\u201d If you can think of more than one motive for changing a class, then that class has more than one responsibility. - Bob Martin")),(0,a.yg)("h2",{id:"creating-an-abstraction"},"Creating an abstraction"),(0,a.yg)("p",null,"So the challenge is, how do we make this class calculate shipping costs without knowing carrier details? All the three carriers share two things in common: They take an order as a parameter and return a double. We can now create an interface with the same signature:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"public interface IShippingCostStrategy\n{\n    double Calculate(Order order);\n}\n")),(0,a.yg)("h2",{id:"creating-the-strategies"},"Creating the strategies"),(0,a.yg)("p",null,"The second step is to remove the three methods responsible for the cost calculation and create 3 classes (3 strategies) and make each of them implement our interface: "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"public class FedExStrategy : IShippingCostStrategy\n{\n    public double Calculate(Order order)\n    {\n        return order.Weight > 300 ? 5.00d * 1.1 : 5.00d;\n    }\n}\n\npublic class USPSStrategy: IShippingCostStrategy\n{\n    public double Calculate(Order order)\n    {\n        return order.Product == ProductType.Book ? 3.00d * 0.9 : 3.00d;\n    }\n}\n\npublic class UpsStrategy : IShippingCostStrategy\n{\n    public double Calculate(Order order)\n    {\n        return order.Weight > 400 ? 4.25d * 1.1 : 4.25d;\n    }\n}\n")),(0,a.yg)("h2",{id:"last-step"},"Last step"),(0,a.yg)("p",null," Now that we have everything we need, it's just a matter of getting rid of the switch statement and inject the strategies by the constructor:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"public class ShippingCalculator\n{\n    readonly IShippingCostStrategy _shippingCostStrategy;\n\n    public ShippingCalculator(IShippingCostStrategy shippingCostStrategy)\n    {\n        this._shippingCostStrategy = shippingCostStrategy;\n    }\n\n    public double CalculateCost(Order order)\n    {\n        return _shippingCostStrategy.Calculate(order);\n    }\n}\n")),(0,a.yg)("p",null,"Now the class depends upon abstraction, instead of three concrete classes."),(0,a.yg)("p",null,"If you are still not convinced, let's check the metrics for the class:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Metric"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Before"),(0,a.yg)("th",{parentName:"tr",align:"center"},"After"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Maintainability Index"),(0,a.yg)("td",{parentName:"tr",align:"center"},"82"),(0,a.yg)("td",{parentName:"tr",align:"center"},"85")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Cyclomatic Complexity"),(0,a.yg)("td",{parentName:"tr",align:"center"},"11"),(0,a.yg)("td",{parentName:"tr",align:"center"},"2")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Depth of Inheritance"),(0,a.yg)("td",{parentName:"tr",align:"center"},"1"),(0,a.yg)("td",{parentName:"tr",align:"center"},"1")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Class Coupling"),(0,a.yg)("td",{parentName:"tr",align:"center"},"3"),(0,a.yg)("td",{parentName:"tr",align:"center"},"2")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Lines of Code"),(0,a.yg)("td",{parentName:"tr",align:"center"},"13"),(0,a.yg)("td",{parentName:"tr",align:"center"},"4")))),(0,a.yg)("p",null,"You can compare the class code ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/FernandoVezzali/pattern-strategy/blob/master/Before/App.Domain/ShippingCalculator.cs"},"before")," and ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/FernandoVezzali/pattern-strategy/blob/master/After/App.Domain/ShippingCalculator.cs"},"after")," the refactoring process."))}d.isMDXComponent=!0}}]);